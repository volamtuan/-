#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Function to generate random IPv6 addresses
gen_ipv6() {
    array=(1 2 3 4 5 6 7 8 9 0 a b c d e f)
    ip64() {
        echo "${array[$RANDOM % 16]}${array[$RANDOM % 16]}${array[$RANDOM % 16]}${array[$RANDOM % 16]}"
    }
    echo "fd${ip64}:${ip64}:${ip64}:${ip64}:${ip64}"
}

# Function to install 3proxy
install_3proxy() {
    echo "Installing 3proxy..."
    if [ -x "$(command -v yum)" ]; then
        yum -y install wget gcc net-tools >/dev/null
        URL="https://github.com/z3APA3A/3proxy/archive/3proxy-0.8.6.tar.gz"
    elif [ -x "$(command -v apt-get)" ]; then
        apt-get -y install wget gcc net-tools >/dev/null
        URL="https://github.com/z3APA3A/3proxy/archive/3proxy-0.8.6.tar.gz"
    elif [ -x "$(command -v apt)" ]; then
        apt -y install wget gcc net-tools >/dev/null
        URL="https://github.com/z3APA3A/3proxy/archive/3proxy-0.8.6.tar.gz"
    else
        echo "Unsupported package manager, script exiting."
        exit 1
    fi

    wget -qO- $URL | tar -xzvf -
    cd 3proxy-3proxy-0.8.6
    make -f Makefile.Linux
    mkdir -p /usr/local/etc/3proxy/{bin,logs,stat}
    cp src/3proxy /usr/local/etc/3proxy/bin/
    cd ..
    rm -rf 3proxy-3proxy-0.8.6
}

# Function to generate 3proxy configuration
gen_3proxy() {
    cat <<EOF
daemon
maxconn 10000
nserver 1.1.1.1
nserver 8.8.4.4
nserver 2001:4860:4860::8888
nserver 2001:4860:4860::8844
nscache 65536
timeouts 1 5 30 60 180 1800 15 60
setgid 65535
setuid 65535
stacksize 6291456 
flush
auth none
allow 192.168.1.1
allow 14.224.163.75
allow 127.0.0.1

$(awk -F "/" '{print "\n" \
"allow *" $1 "\n" \
"proxy -6 -n -a -p" $4 " -i0.0.0.0 -e"$5"\n" \
"flush\n"}' ${WORKDATA})
EOF
}

# Function to generate proxy file for user
gen_proxy_file_for_user() {
    cat >proxy.txt <<EOF
$(awk -F "/" '{print $3 ":" $4 }' ${WORKDATA})
EOF
}

# Function to generate data for IPv6 addresses
gen_data() {
    seq $FIRST_PORT $LAST_PORT | while read port; do
        echo "//$IP4/$port/$(gen_ipv6)"
    done
}

# Function to generate iptables rules
gen_iptables() {
    cat <<EOF
$(awk -F "/" '{print "iptables -I INPUT -p tcp --dport " $4 " -m state --state NEW -j ACCEPT"}' ${WORKDATA})
EOF
}

# Function to configure network interfaces with IPv6 addresses
gen_ifconfig() {
    cat <<EOF
$(awk -F "/" '{print "ifconfig eth0 inet6 add " $5 "/64"}' ${WORKDATA})
EOF
}

# Function to rotate IPv6 addresses
rotate_ipv6() {
    echo "Rotating IPv6 addresses..."

    # Generate new random IPv6 address
    IP6=$(gen_ipv6)

    # Generate and update new IPv6 addresses if necessary
    gen_data >$WORKDIR/data.txt
    gen_ifconfig >$WORKDIR/boot_ifconfig.sh
    bash $WORKDIR/boot_ifconfig.sh

    # Update 3proxy configuration with new IPv6 address
    gen_3proxy >/usr/local/etc/3proxy/3proxy.cfg

    # Restart 3proxy service to apply changes
    systemctl restart 3proxy
    restart_result=$?

    if [ $restart_result -eq 0 ]; then
        echo "[OK]: IPv6 addresses rotated successfully."
    else
        echo "[ERROR]: Failed to rotate IPv6 addresses!"
        exit 1
    fi

    # Display current network information after rotation
    echo "IPv4: $IP4"
    echo "IPv6: $IP6"
}

# Start of main script

# Installing necessary packages and dependencies
echo "Installing required packages..."
if [ -x "$(command -v yum)" ]; then
    yum -y install wget gcc net-tools bsdtar zip >/dev/null
elif [ -x "$(command -v apt-get)" ]; then
    apt-get -y install wget gcc net-tools bsdtar zip >/dev/null
elif [ -x "$(command -v apt)" ]; then
    apt -y install wget gcc net-tools bsdtar zip >/dev/null
else
    echo "Unsupported package manager, script exiting."
    exit 1
fi

# Install 3proxy
install_3proxy

# Setting up working directory
WORKDIR="/home/vlt"
WORKDATA="${WORKDIR}/data.txt"
mkdir -p $WORKDIR && cd $WORKDIR

# Getting IPv4 address
IP4=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -E '^192\.168\.' | head -n 1)

# Getting initial IPv6 address
IP6=$(gen_ipv6)

echo "IPv4: ${IP4}"
echo "IPv6: ${IP6}"

# Define port range for proxies
FIRST_PORT=10000
LAST_PORT=$(($FIRST_PORT + 1000))
echo "Starting port: $FIRST_PORT. Last port: $LAST_PORT. Proceeding..."

# Generate initial configuration files
gen_data >$WORKDIR/data.txt
gen_iptables >$WORKDIR/boot_iptables.sh
gen_ifconfig >$WORKDIR/boot_ifconfig.sh
chmod +x $WORKDIR/boot_*.sh /etc/rc.local

# Generate 3proxy configuration
gen_3proxy >/usr/local/etc/3proxy/3proxy.cfg

# Append configuration to rc.local for startup
cat >>/etc/rc.local <<EOF

systemctl start NetworkManager.service
killall 3proxy
service 3proxy start
bash ${WORKDIR}/boot_iptables.sh
bash ${WORKDIR}/boot_ifconfig.sh
ulimit -u unlimited -n 999999 -s 16384
/usr/local/etc/3proxy/bin/3proxy /usr/local/etc/3proxy/3proxy.cfg
EOF

# Create systemd service for 3proxy
cat <<EOF > /etc/systemd/system/3proxy.service
[Unit]
Description=3proxy Proxy Server
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/etc/3proxy/bin/3proxy /usr/local/etc/3proxy/3proxy.cfg
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Enable and start 3proxy service
chmod +x /etc/rc.d/rc.local
systemctl daemon-reload
systemctl enable 3proxy
systemctl start 3proxy

# Disable firewalld (assuming it's not needed or handled separately)
systemctl stop firewalld
systemctl disable firewalld

echo "Current number of IPv6 addresses:"
ip -6 addr | grep inet6 | wc -l

# Infinite loop to rotate IPv6 every 10 minutes
while true; do
    rotate_ipv6
    sleep 600
done
